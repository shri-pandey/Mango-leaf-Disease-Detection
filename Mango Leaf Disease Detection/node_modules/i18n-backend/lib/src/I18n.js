"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var invariant = require("invariant");
var fetchTranslation_1 = require("./fetchTranslation");
var I18nInstance = (function () {
    function I18nInstance() {
    }
    I18nInstance.prototype.init = function (options) {
        var _a = options.missingPrefix, missingPrefix = _a === void 0 ? '@@' : _a;
        this.setLocale(options.locale);
        this.defaultNS = options.defaultNS;
        this.missingPrefix = missingPrefix;
        if (options.type === 'remote') {
            invariant(typeof options.remoteUrl === 'string', 'remote type should set remoteUrl');
            return this.fetchTrans(options.remoteUrl);
        }
        else {
            invariant(options.translation != null, 'memory type should set translation');
            this.setTranslation(options.translation);
            return Promise.resolve();
        }
    };
    I18nInstance.prototype.setTranslation = function (translation) {
        this.translation = translation;
    };
    I18nInstance.prototype.setLocale = function (locale) {
        this.locale = locale;
        return this;
    };
    I18nInstance.prototype.getLocale = function (locale) {
        return this.locale;
    };
    I18nInstance.prototype.t = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var key;
        var namespace;
        var replacements;
        if (args.length === 1) {
            key = args[0];
            namespace = this.defaultNS;
        }
        else if (args.length === 2) {
            if (typeof args[1] === 'string') {
                namespace = args[0];
                key = args[1];
            }
            else {
                namespace = this.defaultNS;
                key = args[0];
                replacements = args[1];
            }
        }
        else {
            namespace = args[0];
            key = args[1];
            replacements = args[2];
        }
        return this.translate(namespace, key, replacements);
    };
    I18nInstance.prototype.translate = function (namespace, key, replacements) {
        var trans = '';
        try {
            trans = this.translation[this.locale][namespace][key];
        }
        catch (err) {
            console.error("missing translation for locale: " + this.locale + ", namespace: " + namespace + ", key: " + key);
            trans = '';
        }
        if (trans == null || trans === '') {
            return "" + this.missingPrefix + key;
        }
        if (replacements) {
            return this.replace(trans, replacements);
        }
        return trans;
    };
    I18nInstance.prototype.fetchTrans = function (url) {
        var _this = this;
        return fetchTranslation_1.default(url).then(function (data) {
            _this.setTranslation(data.data);
        });
    };
    I18nInstance.prototype.replace = function (trans, replacements) {
        var replaced = trans;
        Object.keys(replacements).forEach(function (replacement) {
            replaced = replaced.replace("%{" + replacement + "}", replacements[replacement]);
        });
        return replaced;
    };
    return I18nInstance;
}());
exports.I18nInstance = I18nInstance;
var I18n = new I18nInstance();
exports.default = I18n;
