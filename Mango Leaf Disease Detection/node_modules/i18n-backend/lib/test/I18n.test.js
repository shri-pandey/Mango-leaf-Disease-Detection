"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var i18n_backend_1 = require("i18n-backend");
var MockAdapter = require("axios-mock-adapter");
var fetchTranslation_1 = require("../src/fetchTranslation");
var translation = {
    en: {
        ns: (_a = {
                hello: 'hello'
            },
            _a['hello name'] = 'hello, %{name}',
            _a),
    },
    zh: {
        ns: (_b = {
                hello: '你好'
            },
            _b['hello name'] = '你好, %{name}',
            _b),
    },
};
describe('I18n init', function () {
    test('remote type should set remoteUrl', function () {
        expect(function () {
            i18n_backend_1.default.init({
                type: 'remote',
                locale: 'en',
                defaultNS: 'common',
            });
        }).toThrow(/remote type should set remoteUrl/);
    });
    test('memory type should set translation', function () {
        expect(function () {
            i18n_backend_1.default.init({
                type: 'memory',
                locale: 'en',
                defaultNS: 'common',
            });
        }).toThrow(/memory type should set translation/);
    });
});
describe('I18n memory type', function () {
    beforeEach(function () {
        i18n_backend_1.default.init({
            type: 'memory',
            locale: 'en',
            defaultNS: 'ns',
            translation: translation,
        });
    });
    test('t translate with ns correct', function () {
        expect(i18n_backend_1.default.t('ns', 'hello')).toEqual('hello');
    });
    test('t translate with default ns correct', function () {
        expect(i18n_backend_1.default.t('hello')).toEqual('hello');
    });
    test('t translate with default ns and replacement correct', function () {
        expect(i18n_backend_1.default.t('hello name', { name: 'wt' })).toEqual('hello, wt');
    });
    test('t translate with replacement correct', function () {
        expect(i18n_backend_1.default.t('ns', 'hello name', { name: 'wt' })).toEqual('hello, wt');
    });
    test('t translate change locale correct', function () {
        i18n_backend_1.default.setLocale('zh');
        expect(i18n_backend_1.default.t('hello')).toEqual('你好');
    });
    test('t translate missing namespace correct', function () {
        expect(i18n_backend_1.default.t('zh-cn', 'hello')).toEqual('@@hello');
    });
    test('t translate null key correct', function () {
        expect(i18n_backend_1.default.t('hel')).toEqual('@@hel');
    });
});
describe('I18n remote type', function () {
    beforeAll(function () {
        var mockAdapter = new MockAdapter(fetchTranslation_1.instance);
        mockAdapter.onGet('http://192.168.1.1/data').reply(200, {
            data: {
                en: {
                    ns: {
                        he: 'he',
                    },
                },
            },
        });
    });
    beforeEach(function () {
        return i18n_backend_1.default.init({
            type: 'remote',
            locale: 'en',
            defaultNS: 'ns',
            remoteUrl: 'http://192.168.1.1/data',
        });
    });
    test('t translate with ns correct', function () {
        expect(i18n_backend_1.default.t('ns', 'he')).toEqual('he');
    });
});
describe('I18n remote type, fetch error', function () {
    beforeAll(function () {
        var mockAdapter = new MockAdapter(fetchTranslation_1.instance);
        mockAdapter.onGet('http://192.168.1.1/data').reply(400);
    });
    test('fetch error', function () { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4, expect(i18n_backend_1.default.init({
                        type: 'remote',
                        locale: 'en',
                        defaultNS: 'ns',
                        remoteUrl: 'http://192.168.1.1/data',
                    })).rejects.toHaveProperty('message', 'fail loading url: http://192.168.1.1/data')];
                case 1:
                    _a.sent();
                    return [2];
            }
        });
    }); });
});
var _a, _b;
